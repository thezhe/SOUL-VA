/** Run PLUG-QA on a specific effect */

namespace main
{
    //effect namespace definition
    namespace effect = VA::HighLevel::TheExpressor;

    //modify as needed for effects with multiple I/O streams
    graph Processor [[main]]
    {
        input stream SampleType32 in;
        output stream SampleType32 out;

        let
        { 
            e = effect::Processor; 

            decode32 = Decode32::Processor;
            encode32 = Encode32::Processor;
        }

        connection
        {       
            in -> decode32 -> e.in;
            e.out -> encode32 -> out;
        }
    }

/*==============================================================================
float32 compatibility code (don't change)                      
==============================================================================*/

    using SampleType32 = float32<VA::SampleType.size>;

    namespace Decode32
    {     
        VA::SampleType process (SampleType32 x)
        {
            VA::SampleType y;

            for (int i = 0; i < SampleType32.size; ++i)
                y.at(i) = VA::SampleType.elementType (x.at(i));
            
            return y;
        }

        processor Processor()
        {
            input stream SampleType32 in;
            output stream VA::SampleType out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    namespace Encode32
    {     
        SampleType32 process (VA::SampleType x)
        {
            SampleType32 y;

            for (int i = 0; i < VA::SampleType.size; ++i)
                y.at(i) = SampleType32.elementType (x.at(i));
            
            return y;
        }

        processor Processor()
        {
            input stream VA::SampleType in;
            output stream SampleType32 out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }


}