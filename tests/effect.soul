/** A copy of '../examples/main.soulpatch' for testing */

namespace main
{
    /*' effect' namespace definition */
    namespace effect = VA::HighLevel::TheExpressor; 
    
    using inType = effect::InType;
    using outType = effect::OutType;

    graph Processor [[main]]
    {
        input stream inType32 in;
        output stream outType32 out;

        let
        { 
            mux3To1 = VA::Mux3To1::Processor(0);

            e = effect::Processor; 
            eD2 = effect::Processor / 2;
            eD4 = effect::Processor / 4;

            encode32 = Encode32::Processor;
            decode32 = Decode32::Processor;
        }

        connection
        {       
            in -> decode32.in;
            
            [sinc] decode32.out -> e.in, eD2.in, eD4.in;
            [sinc] e.out -> mux3To1.in0;
            [sinc] eD2.out -> mux3To1.in1;
            [sinc] eD4.out -> mux3To1.in2;

            mux3To1.out -> encode32 -> out;
        }
    }

/*==============================================================================
CLI/Octave compatibility code                       
==============================================================================*/

    using inType32 = float<inType.size>;
    using outType32 = float<outType.size>;

    namespace Decode32
    {     
        inType process (inType32 x)
        {
            inType y;

            for (int i = 0; i < inType32.size; ++i)
                y.at(i) = inType.elementType (x.at(i));
            
            return y;
        }

        processor Processor()
        {
            input stream inType32 in;
            output stream inType out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    namespace Encode32
    {     
        outType32 process (outType x)
        {
            outType32 y;

            for (int i = 0; i < outType.size; ++i)
                y.at(i) = outType32.elementType (x.at(i));
            
            return y;
        }

        processor Processor()
        {
            input stream outType in;
            output stream outType32 out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }


}