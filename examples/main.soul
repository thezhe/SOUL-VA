/** Processor [[main]] 
    
    To instantiate a 'VA::HighLevel' effect, change the 'effect' namespace definition.
    Then, expose parameter event endpoints and extra stream endpoints as desired.

    NOTE:
    To maintain compatibility with the CLI/Octave, the input and output streams are in float32.
    They are decoded to float64 before going into the effect and encoded to float32 after leaving the effect.
    This code may be deleted if using soul.dev/lab.
*/

namespace main
{
    //effect namespace definition
    namespace effect = VA::HighLevel::TheExpressor;

    graph Processor [[main]]
    {
        input stream SampleType32 in; //, scIn;
        output stream SampleType32 out;

        input
        {
            //expose input streams
            //e.g. e.mixIN
        }

        let
        { 
            e = effect::Processor; 

            decode32 = Decode32::Processor;
           // decode32_1 = Decode32::Processor;
            encode32 = Encode32::Processor;
        }

        connection
        {       
            in -> decode32 -> e.in;
          //  scIn -> decode32_1 -> e.scIn;
            e.out -> encode32 -> out;
        }
    }

/*==============================================================================
CLI/Octave compatibility code                       
==============================================================================*/

    using SampleType32 = float32<VA::SampleType.size>;

    namespace Decode32
    {     
        VA::SampleType process (SampleType32 x)
        {
            VA::SampleType y;

            for (int i = 0; i < SampleType32.size; ++i)
                y.at(i) = VA::SampleType.elementType (x.at(i));
            
            return y;
        }

        processor Processor()
        {
            input stream SampleType32 in;
            output stream VA::SampleType out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    namespace Encode32
    {     
        SampleType32 process (VA::SampleType x)
        {
            SampleType32 y;

            for (int i = 0; i < VA::SampleType.size; ++i)
                y.at(i) = SampleType32.elementType (x.at(i));
            
            return y;
        }

        processor Processor()
        {
            input stream VA::SampleType in;
            output stream SampleType32 out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }
}