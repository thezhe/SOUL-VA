/** Processor [[main]] 
    
    To instantiate a 'VA::HighLevel' effect, change the 'effect' namespace definition.
    Then, expose parameter endpoints as desired.

    NOTE:
    To maintain compatibility with the CLI and Octave, the input and output streams have elements that are float32
    and they are decoded to float64 before going into the effect and encoded to float32 after leaving the effect.
    This code may be deleted and the in/out streams can be changed to 'inType'/'outType' if using soul.dev/lab.
*/

namespace main
{
    /*' effect' namespace definition */
    namespace effect = VA::HighLevel::TheChorus; 
    
    using inType = effect::InType;
    using outType = effect::OutType;

    graph Processor [[main]]
    {
        input stream inType32 in;
        output stream outType32 out;

        input 
        {
            /* expose parameter endpoints */
            //For example: e.depthIn;
        }

        let
        { 
            e = effect::Processor; 

            encode32 = Encode32::Processor;
            decode32 = Decode32::Processor;
        }

        connection
        {       
            in -> decode32 -> e.in;
            e.out -> encode32 -> out;
        }
    }

/*==============================================================================
CLI/Octave compatibility code                       
==============================================================================*/

    using inType32 = float<inType.size>;
    using outType32 = float<outType.size>;

    namespace Decode32
    {     
        inType process (inType32 x)
        {
            inType y;

            for (int i = 0; i < inType32.size; ++i)
                y.at(i) = inType.elementType (x.at(i));
            
            return y;
        }

        processor Processor()
        {
            input stream inType32 in;
            output stream inType out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    namespace Encode32
    {     
        outType32 process (outType x)
        {
            outType32 y;

            for (int i = 0; i < outType.size; ++i)
                y.at(i) = outType32.elementType (x.at(i));
            
            return y;
        }

        processor Processor()
        {
            input stream outType in;
            output stream outType32 out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }


}